import {
  Badge,
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  Button,
  Flex,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Heading,
  IconButton,
  Input,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
  Popover,
  PopoverArrow,
  PopoverCloseButton,
  PopoverContent,
  PopoverTrigger,
  Select,
  useDisclosure,
  useToast,
} from "@chakra-ui/react";
import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import AdminLayout from "../../../components/Layout/AdminLayout";
import { useForm } from "react-hook-form";
import {
  createPeriodeSchema,
  CreatePeriodeSchema,
} from "../../../server/schema/periode.schema";
import { zodResolver } from "@hookform/resolvers/zod";
import { trpc } from "../../../utils/trpc";
import { useCallback, useEffect, useMemo, useRef, useState } from "react";
import { getCookie } from "cookies-next";
import { IoAdd, IoPencil, IoTrash } from "react-icons/io5";
import Link from "next/link";
import { Informasi } from "@prisma/client";
import DataTable from "../../../components/DataTable/DataTable";
import Image from "next/image";
import DeleteAlert from "../../../components/Alert/Delete";
import { updateStatusInformasiSchema, UpdateStatusInformasiSchema } from "../../../server/schema/informasi.schema";
import { EditIcon } from "@chakra-ui/icons";

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const proto = ctx.req.headers["x-forwarded-proto"] ? "https" : "http";
  const token = getCookie(
    proto == "http"
      ? "next-auth.session-token"
      : "__Secure-next-auth.session-token",
    { req: ctx.req, res: ctx.res }
  );
  if (!token) {
    return {
      redirect: {
        destination: "/login?referer=admin",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
};

const InformasiAdmin: NextPage = () => {
  const toast = useToast();
  const { data: dataInformasi, isLoading, refetch } = trpc.useQuery([
    "informasi.getAll", 1000000
  ]);

  const getData = (data: Informasi[] | undefined) => {
    const dataNew = data as Informasi[];
    return dataNew;
  };

  const columns = useMemo(
    () => [
      {
        Header: "Sampul",
        accessor: (d: Informasi) => {
          return (
            <Image
              width={200}
              height={100}
              src={d.sampul || "https://picsum.photos/seed/picsum/200/300"}
              alt="_sampul"
            />
          );
        },
      },
      {
        Header: "Judul",
        accessor: (d: Informasi) => {
          return <p className="w-full">{d.judul}</p>;
        },
      },
      {
        Header: "judul",
        accessor: "judul",
      },
      {
        Header: "Pembuat",
        accessor: "pembuat",
      },
      {
        Header: "Deskripsi",
        accessor: (d: Informasi) => {
          return (
            <p className="w-[200px] h-[100px] overflow-auto">{d.deskripsi}</p>
          );
        },
      },
      {
        Header: "Isi",
        accessor: (d: Informasi) => {
          return <DetailAction data={d} />;
        },
      },
      {
        Header: "Status",
        accessor: (d: Informasi) => {
          const ColorSchema = (data: string) => {
            type tplotOptions = {
              [key: string]: string;
            };
            const dataColor: tplotOptions = {
              Menunggu: "yellow",
              Disetujui: "green",
              Ditolak: "red",
            };

            return dataColor[data];
          };
          return <Badge colorScheme={ColorSchema(d.status)}>{d.status}</Badge>;
        },
      },
      {
        Header: "Action",
        accessor: (d: Informasi) => {
          return <ActionTable key={d?.id} value={d?.id} data={d} refetch={refetch} toast={toast} />
        },
      }
    ],
    [dataInformasi?.reuslt]
  );

  const data = useMemo(
    () => getData(dataInformasi?.reuslt ? dataInformasi.reuslt : []),
    [dataInformasi]
  );

  return (
    <AdminLayout
      title="Data Informasi"
      breadcrumb={
        <Breadcrumb>
          <BreadcrumbItem>
            <BreadcrumbLink href="#">Informasi</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbItem>
            <BreadcrumbLink href="#">Informasi</BreadcrumbLink>
          </BreadcrumbItem>
        </Breadcrumb>
      }
    >
      <>
        <Head>
          <title>SMABAT || Informasi</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="p-5">
          <div className="w-full mb-5 flex gap-5 justify-end items-end">
            <Link href={"/admin/informasi/add"}>
              <Button
                leftIcon={<IoAdd />}
                fontWeight={600}
                color={"white"}
                bg={"orange.400"}
                _hover={{
                  bg: "orange.300",
                }}
              >
                Tambahkan
              </Button>
            </Link>
          </div>
          <div className="text-[12px]">
            <DataTable
              isSearch
              sizeSet
              hiddenColumns={["judul"]}
              isLoading={isLoading}
              columns={columns}
              data={data}
            />
          </div>
        </div>
      </>
    </AdminLayout>
  );
};

export default InformasiAdmin;

interface ActionValue {
  value: any;
  refetch: any;
  toast: any;
  data: Informasi | any;
}

const ActionTable = ({data, refetch, toast, value}: ActionValue) => {
  const [delLoading, setDelLoading] = useState(false);
  const { onOpen, onClose, isOpen } = useDisclosure();
  const {
    onOpen: onOpenDel,
    onClose: onCloseDel,
    isOpen: isOpenDel,
  } = useDisclosure();
  const firstFieldRef = useRef(null);
  const {
    register,
    handleSubmit,
    setValue,
    watch,
    formState: { errors, isSubmitting, isDirty, isValid },
  } = useForm<UpdateStatusInformasiSchema>({
    resolver: zodResolver(updateStatusInformasiSchema),
    mode: "onChange",
  });

  const {mutateAsync: updateStatus} = trpc.useMutation(['informasi.updateStatus'])
  const {mutateAsync: deleteInformasi} = trpc.useMutation(['informasi.delete'])

  const handleDeleteInformasi = useCallback(async (id: string) => {
    const delInformasi = await deleteInformasi(id);
    if (delInformasi.status === 200) {
      toast({
        title: "Hapus data berhasil",
        status: "success",
        duration: 3000,
        position: "top-right",
        isClosable: true,
      });
      refetch();
      setDelLoading(false);
      onCloseDel();
    } else {
      toast({
        title: "Hapus data gagal",
        status: "error",
        duration: 3000,
        position: "top-right",
        isClosable: true,
      });
      setDelLoading(false);
    }
  }, []);

  const handleUbahStatus = useCallback(async (status: string, id: string) => {
    const delPengajuan = await updateStatus({
      id: id,
      status: status,
    });
    if (delPengajuan.status === 200) {
      toast({
        title: "Ubah status berhasil",
        status: "success",
        duration: 3000,
        position: "top-right",
        isClosable: true,
      });
      refetch();
      setDelLoading(false);
      onClose();
    } else {
      toast({
        title: "Ubah status gagal",
        status: "error",
        duration: 3000,
        position: "top-right",
        isClosable: true,
      });
      setDelLoading(false);
    }
  }, []);

  return (
    <Flex alignItems={"center"} gap={"2"}>
      <Popover
        isOpen={isOpen}
        initialFocusRef={firstFieldRef}
        onOpen={() => {
          onOpen();
        }}
        onClose={onClose}
        placement="auto-start"
        closeOnBlur={false}
      >
        <PopoverTrigger>
          <IconButton
            // isLoading={delLoading}
            variant="outline"
            colorScheme="orange"
            aria-label="edit status"
            fontSize="20px"
            size={"sm"}
            onClick={async () => {
              onOpen();
            }}
            icon={<IoPencil />}
          />
        </PopoverTrigger>
        <PopoverContent p={5}>
          <PopoverArrow />
          <PopoverCloseButton />
          <form
            onSubmit={handleSubmit((e) => handleUbahStatus(e.status, e.id))}
          >
            <Input
              // ref={firstFieldRef}
              type={"hidden"}
              bg={"white"}
              borderColor={"orange.300"}
              borderWidth={1}
              id="id"
              defaultValue={value}
              placeholder="Edit nama kelas"
              {...register("id")}
            />
            <FormControl isInvalid={errors.status != undefined}>
              <FormLabel htmlFor="name">Status</FormLabel>
              <Select
                bg={"white"}
                borderColor={"orange.300"}
                borderWidth={1}
                id="status"
                placeholder="Pilih..."
                {...register("status")}
              >
                <option value="Menunggu">Menunggu</option>
                <option value="Ditolak">Ditolak</option>
                <option value="Disetujui">Disetujui</option>
              </Select>
              <FormErrorMessage>
                {errors.status && "Harus dipilih"}
              </FormErrorMessage>
            </FormControl>
            <Button
              disabled={!isValid}
              isLoading={isSubmitting}
              type="submit"
              fontWeight={600}
              color={"white"}
              bg={"orange.400"}
              _hover={{
                bg: "orange.300",
              }}
              mt={"10px"}
            >
              Update
            </Button>
          </form>
        </PopoverContent>
      </Popover>
      <Link href={`/admin/informasi/edit/${value}`}>
        <IconButton
          // isLoading={delLoading}
          variant="outline"
          colorScheme="blue"
          aria-label="edit"
          fontSize="20px"
          size={"sm"}
          // onClick={async () => {
          //   onOpenDel();
          // }}
          icon={<EditIcon />}
        />
      </Link>
      <IconButton
        isLoading={delLoading}
        variant="outline"
        colorScheme="red"
        aria-label="delete"
        fontSize="20px"
        size={"sm"}
        onClick={async () => {
          onOpenDel();
        }}
        icon={<IoTrash />}
      />
      <DeleteAlert
        isOpen={isOpenDel}
        onClick={async () => {
          setDelLoading(true);
          await handleDeleteInformasi(value);
        }}
        onClose={onCloseDel}
        onOpen={onOpenDel}
        isLoading={delLoading}
        title={"Hapus informasi"}
        text={"Apa anda yakin ?"}
      />
    </Flex>
  );
}

interface DetailProps {
  data: Informasi;
}

const DetailAction = ({ data }: DetailProps) => {
  const { isOpen, onOpen, onClose } = useDisclosure();
  return (
    <>
      <Button colorScheme={"blue"} size="sm" onClick={onOpen}>
        Detail
      </Button>
      <Modal isOpen={isOpen} onClose={onClose}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Detail Isi Informasi</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <div
              className="text-[12px] body-content"
              dangerouslySetInnerHTML={{
                __html: data.isi,
              }}
            ></div>
          </ModalBody>

          <ModalFooter>
            <Button size={'sm'} colorScheme="blue" mr={3} onClick={onClose}>
              Keluar
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </>
  );
};

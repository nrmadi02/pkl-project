import {
  Badge,
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  Button,
  Flex,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Heading,
  Input,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
  useDisclosure,
  useToast,
} from "@chakra-ui/react";
import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import AdminLayout from "../../../components/Layout/AdminLayout";
import { useForm } from "react-hook-form";
import {
  createPeriodeSchema,
  CreatePeriodeSchema,
} from "../../../server/schema/periode.schema";
import { zodResolver } from "@hookform/resolvers/zod";
import { trpc } from "../../../utils/trpc";
import { useCallback, useEffect, useMemo } from "react";
import { getCookie } from "cookies-next";
import { IoAdd } from "react-icons/io5";
import Link from "next/link";
import { Informasi } from "@prisma/client";
import DataTable from "../../../components/DataTable/DataTable";
import Image from "next/image";

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const proto = ctx.req.headers["x-forwarded-proto"] ? "https" : "http";
  const token = getCookie(
    proto == "http"
      ? "next-auth.session-token"
      : "__Secure-next-auth.session-token",
    { req: ctx.req, res: ctx.res }
  );
  if (!token) {
    return {
      redirect: {
        destination: "/login?referer=admin",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
};

const InformasiAdmin: NextPage = () => {
  const toast = useToast();
  const { data: dataInformasi, isLoading } = trpc.useQuery([
    "informasi.getAll",
  ]);

  const getData = (data: Informasi[] | undefined) => {
    const dataNew = data as Informasi[];
    return dataNew;
  };

  const columns = useMemo(
    () => [
      {
        Header: "Sampul",
        accessor: (d: Informasi) => {
          return (
            <Image
              width={200}
              height={100}
              src={d.sampul || "https://picsum.photos/seed/picsum/200/300"}
              alt="_sampul"
            />
          );
        },
      },
      {
        Header: "Judul",
        accessor: (d: Informasi) => {
          return <p className="w-full">{d.judul}</p>;
        },
      },
      {
        Header: "judul",
        accessor: "judul",
      },
      {
        Header: "Pembuat",
        accessor: "pembuat",
      },
      {
        Header: "Deskripsi",
        accessor: (d: Informasi) => {
          return (
            <p className="w-[200px] h-[100px] overflow-auto">{d.deskripsi}</p>
          );
        },
      },
      {
        Header: "Isi",
        accessor: (d: Informasi) => {
          return <DetailAction data={d} />;
        },
      },
      {
        Header: "Status",
        accessor: (d: Informasi) => {
          const ColorSchema = (data: string) => {
            type tplotOptions = {
              [key: string]: string;
            };
            const dataColor: tplotOptions = {
              Menunggu: "yellow",
              Disetujui: "green",
              Ditolak: "red",
            };

            return dataColor[data];
          };
          return <Badge colorScheme={ColorSchema(d.status)}>{d.status}</Badge>;
        },
      },
      // {
      //   Header: "Action",
      //   accessor: (d: User) => {
      //     return <ActionTable key={d?.id} value={d?.id} refetch={refetch} toast={toast} />
      //   },
      // }
    ],
    [dataInformasi?.reuslt]
  );

  const data = useMemo(
    () => getData(dataInformasi?.reuslt ? dataInformasi.reuslt : []),
    [dataInformasi]
  );

  return (
    <AdminLayout
      title="Data Informasi"
      breadcrumb={
        <Breadcrumb>
          <BreadcrumbItem>
            <BreadcrumbLink href="#">Informasi</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbItem>
            <BreadcrumbLink href="#">Informasi</BreadcrumbLink>
          </BreadcrumbItem>
        </Breadcrumb>
      }
    >
      <>
        <Head>
          <title>SMABAT || Informasi</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="p-5">
          <div className="w-full mb-5 flex gap-5 justify-end items-end">
            <Link href={"/admin/informasi/add"}>
              <Button
                leftIcon={<IoAdd />}
                fontWeight={600}
                color={"white"}
                bg={"orange.400"}
                _hover={{
                  bg: "orange.300",
                }}
              >
                Tambahkan
              </Button>
            </Link>
          </div>
          <div className="text-[12px]">
            <DataTable
              isSearch
              sizeSet
              hiddenColumns={["judul"]}
              isLoading={isLoading}
              columns={columns}
              data={data}
            />
          </div>
        </div>
      </>
    </AdminLayout>
  );
};

export default InformasiAdmin;

interface DetailProps {
  data: Informasi;
}

const DetailAction = ({ data }: DetailProps) => {
  const { isOpen, onOpen, onClose } = useDisclosure();
  return (
    <>
      <Button colorScheme={"blue"} size="sm" onClick={onOpen}>
        Detail
      </Button>
      <Modal isOpen={isOpen} onClose={onClose}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Detail Isi Informasi</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <div
              className="text-[12px] body-content"
              dangerouslySetInnerHTML={{
                __html: data.isi,
              }}
            ></div>
          </ModalBody>

          <ModalFooter>
            <Button size={'sm'} colorScheme="blue" mr={3} onClick={onClose}>
              Keluar
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </>
  );
};

import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  Button,
  Flex,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Heading,
  Input,
  Textarea,
  useToast,
} from "@chakra-ui/react";
import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import AdminLayout from "../../../../components/Layout/AdminLayout";
import { Controller, useForm } from "react-hook-form";
import {
  createPeriodeSchema,
  CreatePeriodeSchema,
} from "../../../../server/schema/periode.schema";
import { zodResolver } from "@hookform/resolvers/zod";
import { trpc } from "../../../../utils/trpc";
import { useCallback, useEffect, useState } from "react";
import { getCookie } from "cookies-next";
import { IoAdd } from "react-icons/io5";
import Link from "next/link";
import { useRouter } from "next/router";
import { ArrowBackIcon } from "@chakra-ui/icons";
import { useSession } from "next-auth/react";
import Image from "next/image";
import Editor from "../../../../components/Editor/Quill";
import {
  CreateInformasiSchema,
  createInformasiSchema,
  updateInformasiSchema,
  UpdateInformasiSchema,
} from "../../../../server/schema/informasi.schema";

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const proto = ctx.req.headers["x-forwarded-proto"] ? "https" : "http";
  const token = getCookie(
    proto == "http"
      ? "next-auth.session-token"
      : "__Secure-next-auth.session-token",
    { req: ctx.req, res: ctx.res }
  );
  if (!token) {
    return {
      redirect: {
        destination: "/login?referer=admin",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
};

const InformasiEdit: NextPage = () => {
  const toast = useToast();
  const router = useRouter();
  const { data: dataSession } = useSession();

  const {
    register,
    handleSubmit,
    control,
    watch,
    setValue,
    reset,
    formState: { errors, isSubmitting, isDirty, isValid },
  } = useForm<UpdateInformasiSchema>({
    resolver: zodResolver(updateInformasiSchema),
    mode: "onChange",
  });

  const [file, setFile] = useState("");
  const [img, setImg] = useState();
  const [text, setText] = useState("");

  const handleChangeFile = (e: any) => {
    e.target?.files[0] && setFile(URL.createObjectURL(e.target?.files[0]));
    if (e.target?.files[0]) {
      const filereader = new FileReader();
      filereader.readAsDataURL(e.target?.files[0]);
      filereader.onload = function (evt) {
        const base64 = evt.target?.result;
        setImg(e.target?.files[0]);
        setValue("sampul", String(base64));
      };
    }
  };

  const { mutateAsync: updateInformasi } = trpc.useMutation([
    "informasi.update",
  ]);
  const { data: dataInformasi } = trpc.useQuery([
    "informasi.getDetailByID",
    String(router.query.id),
  ]);

  const handleAddInformasi = useCallback(
    async (data: UpdateInformasiSchema) => {
      const result: any = await updateInformasi(data);
      if (result.status === 200) {
        router.push("/admin/informasi");
        setFile("");
        toast({
          title: "Update data berhasil",
          status: "success",
          duration: 3000,
          position: "top-right",
          isClosable: true,
        });
        // refetch()
        // console.log(result)
      } else {
        toast({
          title: "Update data gagal",
          status: "error",
          duration: 3000,
          position: "top-right",
          isClosable: true,
        });
      }
    },
    [updateInformasi]
  );

  useEffect(() => {
    const data = dataInformasi?.reuslt
    if (data) {
        setValue('deskripsi', data.deskripsi)
        setValue('isi', data.isi)
        setValue("judul", data.judul);
        setValue("pembuat", data.pembuat);
        setValue("status", data.status);
        setValue("userID", data.userID);
        setValue("id", data.id);
    }
  }, [dataInformasi])

  useEffect(() => {
    setValue("sampul", '')
  }, [])

  return (
    <AdminLayout
      title="Edit"
      breadcrumb={
        <Breadcrumb>
          <BreadcrumbItem>
            <BreadcrumbLink href="#">Informasi</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbItem>
            <BreadcrumbLink href="#">Informasi</BreadcrumbLink>
          </BreadcrumbItem>
        </Breadcrumb>
      }
    >
      <>
        <Head>
          <title>SMABAT || Edit Informasi</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="px-5 py-2">
          <Button
            onClick={() => {
              router.back();
            }}
            leftIcon={<ArrowBackIcon />}
            color="orange.400"
            variant={"ghost"}
          >
            Kembali
          </Button>
          <Heading size={"md"} mt={"3"}>
            Tambah Informasi
          </Heading>
          <div className="my-5 p-5 bg-white shadow-md rounded ">
            <form onSubmit={handleSubmit(handleAddInformasi)}>
              <FormControl>
                <FormLabel htmlFor="foto">Sampul</FormLabel>
                <Input
                  type="file"
                  accept="image/*"
                  bg={"white"}
                  borderColor={"orange.300"}
                  borderWidth={1}
                  defaultValue={''}
                  id="input-file-upload"
                  className="hidden"
                  {...register("sampul")}
                  onChange={handleChangeFile}
                />
                {!file && !dataInformasi?.reuslt?.sampul && (
                  <label
                    className=" w-[500px] h-[400px]"
                    id="label-file-upload"
                    htmlFor="input-file-upload"
                  >
                    <div className="flex rounded hover:scale-[1.01] transition-all border-[1px] cursor-pointer border-orange-300 flex-col items-center justify-center w-[500px] h-[400px]">
                      <IoAdd size={"50"} color="#F6AD55" />
                    </div>
                  </label>
                )}
                {file && (
                  <label id="label-file-upload" htmlFor="input-file-upload">
                    <div className="w-[250px] h-[200px] md:w-[500px] md:h-[400px] overflow-hidden cursor-pointer hover:scale-[1.01] transition-all rounded-md border-[2px] border-orange-300">
                      <Image
                        className="rounded-md"
                        objectFit="fill"
                        layout="responsive"
                        height={500}
                        width={500}
                        alt="_img"
                        src={file}
                      />
                    </div>
                  </label>
                )}
                {!file && dataInformasi?.reuslt?.sampul && (
                  <label id="label-file-upload" htmlFor="input-file-upload">
                    <div className="w-[250px] h-[200px] md:w-[500px] md:h-[400px] overflow-hidden cursor-pointer hover:scale-[1.01] transition-all rounded-md border-[2px] border-orange-300">
                      <Image
                        className="rounded-md"
                        objectFit="fill"
                        layout="responsive"
                        height={500}
                        width={500}
                        alt="_img"
                        src={dataInformasi?.reuslt?.sampul}
                      />
                    </div>
                  </label>
                )}
                <FormErrorMessage>
                  {errors.sampul && errors.sampul.message?.toString()}
                </FormErrorMessage>
              </FormControl>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-3">
                <FormControl isInvalid={errors.judul != undefined}>
                  <FormLabel htmlFor="perihal">Judul</FormLabel>
                  <Input
                    bg={"white"}
                    borderColor={"orange.300"}
                    borderWidth={1}
                    id="judul"
                    placeholder="Masukan judul informasi"
                    {...register("judul")}
                  />
                  <FormErrorMessage>
                    {errors.judul && errors.judul.message}
                  </FormErrorMessage>
                </FormControl>
                <FormControl isInvalid={errors.pembuat != undefined}>
                  <FormLabel htmlFor="perihal">Pembuat</FormLabel>
                  <Input
                    bg={"white"}
                    borderColor={"orange.300"}
                    borderWidth={1}
                    id="pembuat"
                    placeholder="Masukan nama pembuat"
                    {...register("pembuat")}
                  />
                  <FormErrorMessage>
                    {errors.pembuat && errors.pembuat.message}
                  </FormErrorMessage>
                </FormControl>
              </div>
              <div className="grid grid-cols-1 gap-3 mt-3">
                <FormControl isInvalid={errors.deskripsi != undefined}>
                  <FormLabel htmlFor="perihal">Deskripsi</FormLabel>
                  <Textarea
                    bg={"white"}
                    borderColor={"orange.300"}
                    borderWidth={1}
                    id="deskripsi"
                    placeholder="Masukan deskripsi"
                    {...register("deskripsi")}
                  />
                  <FormErrorMessage>
                    {errors.deskripsi && errors.deskripsi.message}
                  </FormErrorMessage>
                </FormControl>
              </div>
              <div className="grid grid-cols-1 gap-3 mt-3">
                <FormControl isInvalid={errors.isi != undefined}>
                  <FormLabel htmlFor="perihal">Isi Informasi</FormLabel>

                  {dataInformasi?.reuslt?.isi && (
                    <Controller
                      name="isi"
                      control={control}
                      render={({ field: { value, onChange } }) => (
                        <Editor
                          editor={value}
                          setEditorState={onChange}
                          withImage={false}
                        />
                      )}
                    />
                  )}
                  <Input
                    bg={"white"}
                    borderColor={"orange.300"}
                    borderWidth={1}
                    id="isi"
                    type={"hidden"}
                    placeholder="Masukan isi"
                    {...register("isi")}
                  />
                  <FormErrorMessage>
                    {errors.isi && errors.isi.message}
                  </FormErrorMessage>
                </FormControl>
              </div>
              <Input
                bg={"white"}
                borderColor={"orange.300"}
                borderWidth={1}
                id="status"
                type={"hidden"}
                defaultValue="Menunggu"
                placeholder="Masukan status"
                {...register("status")}
              />
              <Input
                bg={"white"}
                borderColor={"orange.300"}
                borderWidth={1}
                id="userID"
                type={"hidden"}
                defaultValue={String(dataSession?.id)}
                placeholder="Masukan status"
                {...register("userID")}
              />
              <Input
                bg={"white"}
                borderColor={"orange.300"}
                borderWidth={1}
                id="id"
                type={"hidden"}
                defaultValue={String(router.query.id)}
                placeholder="Masukan status"
                {...register("id")}
              />
              <Button
                isLoading={isSubmitting}
                disabled={!isValid}
                type="submit"
                mt={3}
                fontWeight={600}
                color={"white"}
                bg={"orange.400"}
                _hover={{
                  bg: "orange.300",
                }}
              >
                Edit
              </Button>
            </form>
          </div>
        </div>
      </>
    </AdminLayout>
  );
};

export default InformasiEdit;

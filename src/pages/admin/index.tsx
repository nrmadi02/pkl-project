import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  Grid,
  GridItem,
  Heading,
  Skeleton,
  Text,
} from "@chakra-ui/react";
import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { IoBook, IoPeople, IoSchool } from "react-icons/io5";
import AdminLayout from "../../components/Layout/AdminLayout";
import { trpc } from "../../utils/trpc";
import { getCookie } from "cookies-next";
import {
  Chart as ChartJs,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Filler,
} from "chart.js";
import { Line } from "react-chartjs-2";
import { useEffect, useState } from "react";

ChartJs.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Filler
);

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const proto = ctx.req.headers["x-forwarded-proto"] ? "https" : "http";
  const token = getCookie(
    proto == "http"
      ? "next-auth.session-token"
      : "__Secure-next-auth.session-token",
    { req: ctx.req, res: ctx.res }
  );
  if (!token) {
    return {
      redirect: {
        destination: "/login?referer=admin",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
};

const Admin: NextPage = () => {
  const { data: Users, isLoading: loadingUsers } = trpc.useQuery([
    "user.getAllUsers",
  ]);
  const { data: Guru, isLoading: loadingGuru } = trpc.useQuery(["guru.getAll"]);
  const { data: Kelas, isLoading: loadingKelas } = trpc.useQuery([
    "kelas.getAll",
  ]);
  const { data: Siswa, isLoading: loadingSiswa } = trpc.useQuery([
    "siswa.getAll",
    "",
  ]);
  const { data: DataStats, isLoading: loadingStats } = trpc.useQuery([
    "pelanggaran.getStats",
  ]);

  const [dataStats, setDataStats] = useState({
    last: [] as number[] | undefined,
    before: [] as number[] | undefined,
  });

  useEffect(() => {
    setDataStats({
      ...dataStats,
      before: DataStats?.result.before,
      last: DataStats?.result.last,
    });
  }, [DataStats]);

  return (
    <AdminLayout
      title="Dashboard"
      breadcrumb={
        <Breadcrumb>
          <BreadcrumbItem>
            <BreadcrumbLink href="#">Home</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbItem>
            <BreadcrumbLink href="#">Dashboard</BreadcrumbLink>
          </BreadcrumbItem>
        </Breadcrumb>
      }
    >
      <>
        <Head>
          <title>SMABAT || Admin</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="p-5">
          <Grid
            templateColumns={{ base: "repeat(1, 1fr)", md: "repeat(4, 1fr)" }}
            gap={6}
          >
            <GridItem w="100%">
              <Skeleton height="100%" isLoaded={!loadingUsers} fadeDuration={4}>
                <ItemInfo
                  icon={<IoPeople color="white" size="25px" />}
                  amount={Users?.result.length.toString()}
                  title={"Total Users"}
                />
              </Skeleton>
            </GridItem>
            <GridItem w="100%">
              <Skeleton height="100%" isLoaded={!loadingSiswa} fadeDuration={4}>
                <ItemInfo
                  icon={<IoSchool color="white" size="25px" />}
                  amount={Siswa?.result.length.toString()}
                  title={"Total Siswa"}
                />
              </Skeleton>
            </GridItem>
            <GridItem w="100%">
              <Skeleton height="100%" isLoaded={!loadingGuru} fadeDuration={4}>
                <ItemInfo
                  icon={<IoSchool color="white" size="25px" />}
                  amount={Guru?.result.length.toString()}
                  title={"Total Guru"}
                />
              </Skeleton>
            </GridItem>
            <GridItem w="100%">
              <Skeleton height="100%" isLoaded={!loadingKelas} fadeDuration={4}>
                <ItemInfo
                  icon={<IoBook color="white" size="25px" />}
                  amount={Kelas?.result.length.toString()}
                  title={"Total Kelas"}
                />
              </Skeleton>
            </GridItem>
          </Grid>
          <Heading size={"md"} className="font-bold mt-5 mb-3">
            Data Pelanggaran
          </Heading>
          <div className="bg-white p-5 rounded-xl shadow-md mt-5">
            <Skeleton height="350px" isLoaded={!loadingStats} fadeDuration={4}>
              <div className="h-[350px]">
                <Line
                  data={{
                    labels: [
                      "Januari",
                      "Februari",
                      "Maret",
                      "April",
                      "Mei",
                      "Juni",
                      "Juli",
                      "Agustus",
                      "September",
                      "Oktober",
                      "November",
                      "Desember",
                    ],
                    datasets: [
                      {
                        label: new Date().getFullYear().toString(),
                        backgroundColor: "#3182ce",
                        borderColor: "#3182ce",
                        data: dataStats.last,
                        fill: false,
                        pointRadius: 5,
                        tension: 0.28,
                        yAxisID: "y",
                        xAxisID: "x",
                      },
                      {
                        label: String(new Date().getFullYear() - 1),
                        fill: false,
                        backgroundColor: "#FF9113",
                        borderColor: "#FF9113",
                        pointRadius: 5,
                        tension: 0.28,
                        data: dataStats.before,
                        yAxisID: "y",
                        // xAxisID: "x",
                      },
                    ],
                  }}
                  options={{
                    maintainAspectRatio: false,
                    responsive: true,
                    hover: {
                      mode: "nearest",
                      intersect: true,
                    },
                    plugins: {
                      title: {
                        display: false,
                        text: "Pelanggaran",
                        color: "black",
                      },
                      legend: {
                        labels: {
                          // color: "black",
                        },
                        align: "end",
                        position: "bottom",
                      },
                      tooltip: {
                        mode: "index",
                        intersect: false,
                      },
                    },
                    scales: {
                      y: {
                        type: "linear" as const,
                        display: true,
                        position: "left" as const,
                        grid: {
                          display: true,
                          tickBorderDash: [2],
                          tickBorderDashOffset: 3,
                          // color: "red",
                        },
                      },
                      x: {
                        grid: {
                          display: false,
                          tickBorderDash: [2],
                          tickBorderDashOffset: 3,
                          color: "red",
                        },
                      },
                    },
                  }}
                />
              </div>
            </Skeleton>
          </div>
        </div>
      </>
    </AdminLayout>
  );
};

interface ItemProps {
  title?: string;
  amount?: string;
  icon: any;
}

const ItemInfo = ({ amount, icon, title }: ItemProps) => {
  return (
    <div className="flex bg-white p-8 rounded-xl shadow-md flex-row items-center justify-between">
      <div className="flex flex-col items-start justify-center gap-y-[10px]">
        <Heading color={"gray.400"} size={"sm"}>
          {title}
        </Heading>
        <Heading size={"md"}>{amount}</Heading>
      </div>
      <div className="bg-orange-400 p-3 rounded-xl">{icon}</div>
    </div>
  );
};

export default Admin;

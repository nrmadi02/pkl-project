import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, Button, Checkbox, Flex, FormControl, FormErrorMessage, FormLabel, Heading, Input, Select, useDisclosure, useToast } from "@chakra-ui/react";
import { NextPage } from "next";
import Head from "next/head";
import { ChangeEvent, useCallback, useEffect, useRef, useState } from "react";
import { IoAdd } from "react-icons/io5";
import AdminLayout from "../../../components/Layout/AdminLayout";
import { CreateGuruSchema, createGuruSchema } from "../../../server/schema/guru.schema";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import DrawerForm from "../../../components/DrawerForm";
import { trpc } from "../../../utils/trpc";
import Image from "next/image";

const DataGuru: NextPage = () => {
    const { isOpen, onOpen, onClose } = useDisclosure()
    const btnRef = useRef<HTMLButtonElement>(null)
    const [show, setShow] = useState(false)
    const toast = useToast()
    const [file, setFile] = useState('')
    const [img, setImg] = useState()
    const { register, handleSubmit, watch, setValue, formState: { errors, isSubmitting, isDirty, isValid } } = useForm<CreateGuruSchema>({
        resolver: zodResolver(createGuruSchema),
        mode: "onChange"
    });
    const [onCheck, setOnCheck] = useState(false)

    const handleChangeFile = (e: ChangeEvent<HTMLInputElement>) => {
        let reader = new FileReader();
        // @ts-ignore
        e.target?.files[0] && setFile(URL.createObjectURL(e.target?.files[0]))
        // @ts-ignore
        if (e.target?.files[0]!) {
            var filereader = new FileReader();
            filereader.readAsDataURL(e.target?.files[0]);
            filereader.onload = function (evt) {
                var base64 = evt.target?.result;
                // @ts-ignore
                setImg(e.target?.files[0]!)
                // @ts-ignore
                setValue("potoProfile", base64)
            }
        }
    }

    const { data: dataKelas } = trpc.useQuery(['kelas.getAll'])
    const { mutateAsync: tambahGuru } = trpc.useMutation(['guru.create'])

    const handleAddGuru = useCallback(
        async (data: CreateGuruSchema) => {
            const result: any = await tambahGuru(data);
            if (result.status === 201) {
                // router.push("/")
                setFile('')
                onClose()
                toast({
                    title: 'Tambah data guru berhasil',
                    status: 'success',
                    duration: 3000,
                    position: 'top-right',
                    isClosable: true,
                })
                // refetch()
                // console.log(result)
            } else {
                toast({
                    title: 'Tambah data user gagal',
                    status: 'error',
                    duration: 3000,
                    position: 'top-right',
                    isClosable: true,
                })
            }
        },
        [tambahGuru]
    );

    useEffect(() => {
        const subs = watch((e) => {
            // console.log(e)
        })

        return () => subs.unsubscribe()
    }, [watch])

    useEffect(() => {
        file == '' && setValue('potoProfile', null)
    }, [file])

    return (
        <AdminLayout title='Guru' breadcrumb={(
            <Breadcrumb>
                <BreadcrumbItem>
                    <BreadcrumbLink href='#'>Pendataan</BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbItem>
                    <BreadcrumbLink href='#'>Guru</BreadcrumbLink>
                </BreadcrumbItem>
            </Breadcrumb>
        )}>
            <>
                <Head>
                    <title>SMABAT || Guru</title>
                    <meta name="description" content="Generated by create-t3-app" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>
                <div className="p-5">
                    <div className='w-full mb-5 flex justify-end items-end'>
                        <Button onClick={onOpen} ref={btnRef} leftIcon={<IoAdd />} fontWeight={600}
                            color={'white'}
                            bg={'orange.400'}
                            _hover={{
                                bg: 'orange.300',
                            }}>
                            Tambah data
                        </Button>
                    </div>
                </div>
                <DrawerForm btnRef={btnRef} isOpen={isOpen} onClose={() => {
                    setFile('')
                    onClose()
                }} bottomButtons={
                    <>
                        <Button variant='outline' mr={3} onClick={() => {
                            setFile('')
                            onClose()
                        }}>
                            Batal
                        </Button>
                        <Button isLoading={isSubmitting} type='submit' form='my-form' fontWeight={600}
                            color={'white'}
                            bg={'orange.400'}
                            _hover={{
                                bg: 'orange.300',
                            }}>
                            Simpan
                        </Button>
                    </>
                }>
                    <div className='pt-5'>
                        <Heading size={'lg'} mb='5'>Tambah data guru</Heading>
                        <form id='my-form' onSubmit={handleSubmit(handleAddGuru)}>
                            <Flex w={'full'} flexDirection={'column'} gap={'10px'}>
                                <FormControl isInvalid={errors.potoProfile != undefined}>
                                    <FormLabel htmlFor='foto'>Foto (optional)</FormLabel>
                                    <Input
                                        type="file"
                                        accept="image/*"
                                        bg={'white'} borderColor={'orange.300'} borderWidth={1}
                                        id='input-file-upload'
                                        className="hidden"
                                        {...register('potoProfile')}
                                        onChange={handleChangeFile}
                                    />
                                    {!file && <label id="label-file-upload" htmlFor="input-file-upload">
                                        <div className="flex rounded hover:scale-[1.01] transition-all border-[1px] cursor-pointer border-orange-300 flex-col items-center justify-center w-[200px] h-[230px]">
                                            <IoAdd size={'50'} color='#F6AD55' />
                                        </div>
                                    </label>}
                                    {file && <label id="label-file-upload" htmlFor="input-file-upload">
                                        <div className="w-[200px] h-[230px] cursor-pointer hover:scale-[1.01] transition-all rounded-md border-[2px] border-orange-300">
                                            <Image className="rounded-md" width={200} height={230} alt='_img' src={file} />
                                        </div>

                                    </label>}
                                    {/* <FormErrorMessage>
                                        {errors.potoProfile && errors.potoProfile.message?.toString()}
                                    </FormErrorMessage> */}
                                </FormControl>
                                <FormControl isInvalid={errors.nama != undefined}>
                                    <FormLabel htmlFor='name'>Nama Guru</FormLabel>
                                    <Input
                                        bg={'white'} borderColor={'orange.300'} borderWidth={1}
                                        id='nama'
                                        placeholder='Masukan nama guru'
                                        {...register('nama')}
                                    />
                                    <FormErrorMessage>
                                        {errors.nama && errors.nama.message}
                                    </FormErrorMessage>
                                </FormControl>
                                <FormControl isInvalid={errors.email != undefined}>
                                    <FormLabel htmlFor='email'>Email</FormLabel>
                                    <Input
                                        bg={'white'} borderColor={'orange.300'} borderWidth={1}
                                        id='email'
                                        placeholder='Masukan email'
                                        {...register('email', {
                                            required: 'This is required',
                                        })}
                                    />
                                    <FormErrorMessage>
                                        {errors.email && errors.email.message}
                                    </FormErrorMessage>
                                </FormControl>
                                <FormControl isInvalid={errors.nip != undefined}>
                                    <FormLabel htmlFor='nomorInduk'>Nomor Induk</FormLabel>
                                    <Input
                                        bg={'white'} borderColor={'orange.300'} borderWidth={1}
                                        id='nip'
                                        placeholder='Masukan nomor induk'
                                        {...register('nip')}
                                    />
                                    <FormErrorMessage>
                                        {errors.nip && errors.nip.message}
                                    </FormErrorMessage>
                                </FormControl>
                                <FormControl isInvalid={errors.jenisGuru != undefined}>
                                    <FormLabel htmlFor='jenisGuru'>Jenis Guru</FormLabel>
                                    <Input
                                        bg={'white'} borderColor={'orange.300'} borderWidth={1}
                                        id='jenisGuru'
                                        placeholder='Masukan jenis guru'
                                        {...register('jenisGuru')}
                                    />
                                    <FormErrorMessage>
                                        {errors.jenisGuru && errors.jenisGuru.message}
                                    </FormErrorMessage>
                                </FormControl>
                                <FormControl isInvalid={errors.jenisKelamin != undefined}>
                                    <FormLabel htmlFor='jenisKelamin'>Jenis Kelamin</FormLabel>
                                    <Select bg={'white'} borderColor={'orange.300'} borderWidth={1} id='jenisKelamin' placeholder='Pilih jenis kelamin' {...register('jenisKelamin')}>
                                        <option value={'Laki-laki'}>Laki-laki</option>
                                        <option value={'Perempuan'}>Perempuan</option>
                                    </Select>
                                    <FormErrorMessage>
                                        {errors.jenisKelamin && "Jenis kelamin harus di isi"}
                                    </FormErrorMessage>
                                </FormControl>
                                <Checkbox {...register('waliKelas')} defaultChecked={onCheck} onChange={() => setOnCheck(!onCheck)}>Wali Kelas (optional)</Checkbox>
                                {onCheck ? <FormControl isInvalid={errors.namaKelas != undefined}>
                                    <FormLabel htmlFor='namaKelas'>Pilih Kelas</FormLabel>
                                    <Select bg={'white'} borderColor={'orange.300'} borderWidth={1} id='namaKelas' placeholder='Pilih kelas' {...register('namaKelas')}>
                                        {dataKelas && dataKelas.result.map((itm, idx) => {
                                            return (
                                                <option value={itm.name}>{itm.name}</option>
                                            )
                                        })}
                                    </Select>
                                    <FormErrorMessage>
                                        {errors.namaKelas && "Nama kelas harus di isi"}
                                    </FormErrorMessage>
                                </FormControl> : null}
                            </Flex>
                        </form>
                    </div>
                </DrawerForm>
            </>
        </AdminLayout>
    )
}

export default DataGuru
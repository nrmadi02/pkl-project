import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, Button, Flex, FormControl, FormErrorMessage, FormLabel, Heading, IconButton, Input, Popover, PopoverArrow, PopoverCloseButton, PopoverContent, PopoverTrigger, useDisclosure, useToast } from "@chakra-ui/react";
import { zodResolver } from "@hookform/resolvers/zod";
import { Kelas } from "@prisma/client";
import { getCookie } from "cookies-next";
import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useCallback, useMemo, useRef, useState } from "react";
import { useForm } from "react-hook-form";
import { IoAdd, IoPencil, IoTrash } from "react-icons/io5";
import DataTable from "../../../components/DataTable/DataTable";
import AdminLayout from "../../../components/Layout/AdminLayout";
import { createKelasSchema, CreateKelasSchema, UpdateKelasSchema, updateKelasSchema } from "../../../server/schema/kelas.schema";
import { trpc } from "../../../utils/trpc";

export const getServerSideProps: GetServerSideProps = async (ctx) => {
    const isDevelopment = process.env.NODE_ENV == "development"
    const token = getCookie(isDevelopment ? 'next-auth.session-token' : '__Secure-next-auth.session-token', { req: ctx.req, res: ctx.res })
    if (!token) {
      return {
        redirect: {
          destination: "/login?referer=admin",
          permanent: false,
        },
      };
    }
    return {
      props: {
      }
    }
  }

const KelasData: NextPage = () => {
    const { onOpen, onClose, isOpen } = useDisclosure()
    const firstFieldRef = useRef(null)
    const toast = useToast()
    const { register, handleSubmit, watch, formState: { errors, isSubmitting, isDirty, isValid } } = useForm<CreateKelasSchema>({
        resolver: zodResolver(createKelasSchema),
        mode: "onChange"
    });

    const { mutateAsync: tambahKelas } = trpc.useMutation(['kelas.create'])
    const { data: Kelas, isLoading, refetch } = trpc.useQuery(['kelas.getAll'], {
        refetchOnWindowFocus: false
    })
    const { data: Periode } = trpc.useQuery(['periode.get'], {
        refetchOnWindowFocus: false
    })

    const handleCreateKelas = useCallback(
        async (e: CreateKelasSchema) => {
            const result = await tambahKelas(e)
            if (result.status === 201) {
                onClose()
                toast({
                    title: 'Tambah data kelas berhasil',
                    status: 'success',
                    duration: 3000,
                    position: 'top-right',
                    isClosable: true,
                })
                refetch()
            } else {
                toast({
                    title: 'Tambah data kelas gagal',
                    status: 'error',
                    duration: 3000,
                    position: 'top-right',
                    isClosable: true,
                })
            }
        }
        , [])

    const getData = (data: Kelas[] | undefined) => {
        const dataNew = data as Kelas[]
        return dataNew
    }

    const columns = useMemo(() => [
        {
            Header: "Nama Kelas",
            accessor: "name"
        },
        {
            Header: "Action",
            accessor: (d: Kelas) => {
                return <ActionTable key={d.id} value={d?.id} name={d?.name} refetch={refetch} toast={toast} />
            },
        }
    ], [Kelas?.result])

    const data = useMemo(() => getData(Kelas?.result ? Kelas.result : []), [Kelas])
    return (
        <AdminLayout title='Kelas' breadcrumb={(
            <Breadcrumb>
                <BreadcrumbItem>
                    <BreadcrumbLink href='#'>Pendataan</BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbItem>
                    <BreadcrumbLink href='#'>Kelas</BreadcrumbLink>
                </BreadcrumbItem>
            </Breadcrumb>
        )}>
            <>
                <Head>
                    <title>SMABAT || Kelas</title>
                    <meta name="description" content="Generated by create-t3-app" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>
                <div className="p-5">
                    <Heading size={'md'}>Tahun Ajaran {Periode?.result ? Periode?.result : '-'}</Heading>
                    <div className='w-full mb-5 flex justify-end items-end'>

                        <Popover
                            isOpen={isOpen}
                            initialFocusRef={firstFieldRef}
                            onOpen={onOpen}
                            onClose={onClose}
                            placement='bottom-start'
                            closeOnBlur={false}
                        >
                            <PopoverTrigger>
                                <Button onClick={onOpen} leftIcon={<IoAdd />} fontWeight={600}
                                    color={'white'}
                                    bg={'orange.400'}
                                    _hover={{
                                        bg: 'orange.300',
                                    }}>
                                    Tambah data
                                </Button>
                            </PopoverTrigger>
                            <PopoverContent p={5}>
                                <PopoverArrow />
                                <PopoverCloseButton />
                                <form onSubmit={handleSubmit(handleCreateKelas)}>
                                    <FormControl isInvalid={errors.name != undefined}>
                                        <FormLabel htmlFor='name'>Nama kelas</FormLabel>
                                        <Input
                                            // ref={firstFieldRef}
                                            bg={'white'} borderColor={'orange.300'} borderWidth={1}
                                            id='name'
                                            placeholder='Masukan nama kelas'
                                            {...register('name')}
                                        />
                                        <FormErrorMessage>
                                            {errors.name && errors.name.message}
                                        </FormErrorMessage>
                                    </FormControl>
                                    <Button disabled={!isValid} isLoading={isSubmitting} type='submit' fontWeight={600}
                                        color={'white'}
                                        bg={'orange.400'}
                                        _hover={{
                                            bg: 'orange.300',
                                        }} mt={'10px'}>
                                        Simpan
                                    </Button>
                                </form>
                            </PopoverContent>
                        </Popover>
                    </div>
                    <DataTable hiddenColumns={[]} columns={columns} data={data} isLoading={isLoading} />
                </div>
            </>
        </AdminLayout>
    )
}


export default KelasData

interface ActionValue {
    value: any,
    refetch: any,
    toast: any,
    name: any
}

const ActionTable = ({ value, name, refetch, toast }: ActionValue) => {
    const { onOpen, onClose, isOpen } = useDisclosure()
    const firstFieldRef = useRef(null)
    const [delLoading, setDelLoading] = useState(false)
    const { register, handleSubmit, watch, formState: { errors, isSubmitting, isDirty, isValid } } = useForm<UpdateKelasSchema>({
        resolver: zodResolver(updateKelasSchema),
        mode: "onChange"
    });

    const { mutateAsync: hapusKelas, isLoading: deleteLoading } = trpc.useMutation(['kelas.delete'])
    const { mutateAsync: ubahKelas } = trpc.useMutation(['kelas.update'])

    const handleUpdateKelas = useCallback(
        async (d: UpdateKelasSchema) => {
            const delUser = await ubahKelas({
                id: d.id,
                name: d.name
            })
            if (delUser.status === 200) {
                toast({
                    title: 'Edit data kelas berhasil',
                    status: 'success',
                    duration: 3000,
                    position: 'top-right',
                    isClosable: true,
                })
                refetch()
                setDelLoading(false)
            } else {
                toast({
                    title: 'Edit data kelas gagal',
                    status: 'error',
                    duration: 3000,
                    position: 'top-right',
                    isClosable: true,
                })
                setDelLoading(false)
            }
        }, []
    )

    const handleDeleteKelas = useCallback(
        async (id: string) => {
            const delUser = await hapusKelas(id)
            if (delUser.status === 200) {
                toast({
                    title: 'Hapus data kelas berhasil',
                    status: 'success',
                    duration: 3000,
                    position: 'top-right',
                    isClosable: true,
                })
                refetch()
                setDelLoading(false)
            } else {
                toast({
                    title: 'Hapus data kelas gagal',
                    status: 'error',
                    duration: 3000,
                    position: 'top-right',
                    isClosable: true,
                })
                setDelLoading(false)
            }
        }, []
    )
    return (
        <Flex alignItems={'center'} gap={'2'}>
            <Popover
                isOpen={isOpen}
                initialFocusRef={firstFieldRef}
                onOpen={onOpen}
                onClose={onClose}
                placement='start-start'
                closeOnBlur={false}
            >
                <PopoverTrigger>
                    <IconButton
                        isLoading={delLoading}
                        variant='outline'
                        colorScheme='orange'
                        aria-label='edit'
                        fontSize='20px'
                        onClick={async () => {
                            onOpen()
                        }}
                        icon={<IoPencil />}
                    />
                </PopoverTrigger>
                <PopoverContent p={5}>
                    <PopoverArrow />
                    <PopoverCloseButton />
                    <form onSubmit={handleSubmit(handleUpdateKelas)}>
                        <Input
                            // ref={firstFieldRef}
                            type={'hidden'}
                            bg={'white'} borderColor={'orange.300'} borderWidth={1}
                            id='id'
                            defaultValue={value}
                            placeholder='Edit nama kelas'
                            {...register('id')}
                        />
                        <FormControl isInvalid={errors.name != undefined}>
                            <FormLabel htmlFor='name'>Nama kelas</FormLabel>
                            <Input
                                // ref={firstFieldRef}
                                bg={'white'} borderColor={'orange.300'} borderWidth={1}
                                id='name'
                                defaultValue={name}
                                placeholder='Edit nama kelas'
                                {...register('name')}
                            />
                            <FormErrorMessage>
                                {errors.name && errors.name.message}
                            </FormErrorMessage>
                        </FormControl>
                        <Button disabled={!isValid} isLoading={isSubmitting} type='submit' fontWeight={600}
                            color={'white'}
                            bg={'orange.400'}
                            _hover={{
                                bg: 'orange.300',
                            }} mt={'10px'}>
                            Update
                        </Button>
                    </form>
                </PopoverContent>
            </Popover>

            <IconButton
                isLoading={delLoading}
                variant='outline'
                colorScheme='red'
                aria-label='delete'
                fontSize='20px'
                onClick={async () => {
                    setDelLoading(true)
                    await handleDeleteKelas(value)
                }}
                icon={<IoTrash />}
            />

        </Flex>
    )
}
import { getCookie } from "cookies-next";
import { GetServerSideProps, NextPage } from "next";
import AdminLayout from "../../../../components/Layout/AdminLayout";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  Button,
  IconButton,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalHeader,
  ModalOverlay,
  Select,
  Tooltip,
  useDisclosure,
  useToast,
} from "@chakra-ui/react";
import Head from "next/head";
import DataTable from "../../../../components/DataTable/DataTable";
import { useRouter } from "next/router";
import { useSession } from "next-auth/react";
import { trpc } from "../../../../utils/trpc";
import { Konseling, Siswa, Tindaklanjut } from "@prisma/client";
import { createRef, useMemo, useState } from "react";
import moment from "moment";
import { RangeDatepicker } from "chakra-dayzed-datepicker";
import { MdClear } from "react-icons/md";
import { CalendarIcon, DownloadIcon } from "@chakra-ui/icons";
import { IoDownload } from "react-icons/io5";
import { LaporanJadwal } from "../../../../components/Laporan/LaporanJadwalBimbingan";
import { useReactToPrint } from "react-to-print";
import { LaporanBimbinganPDF } from "../../../../components/Laporan/LaporanBimbingan";

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const proto = ctx.req.headers["x-forwarded-proto"] ? "https" : "http";
  const token = getCookie(
    proto == "http"
      ? "next-auth.session-token"
      : "__Secure-next-auth.session-token",
    { req: ctx.req, res: ctx.res }
  );
  if (!token) {
    return {
      redirect: {
        destination: "/login?referer=admin",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
};

const LaporanBimbingan: NextPage = () => {
  const componentRef = createRef<HTMLDivElement>();
  const handlePrint = useReactToPrint({
    content: () => componentRef.current,
  });

  const [selectedDates, setSelectedDates] = useState<Date[]>([]);
  const [selectedType, setSelectedType] = useState("");
  const {
    onOpen: onOpenPrint,
    onClose: onClosePrint,
    isOpen: isOpenPrint,
  } = useDisclosure();

  const {
    data: dataLaporan,
    isLoading,
    refetch,
  } = trpc.useQuery([
    "tindak.getAllWithFilter",
    {
      type: selectedType,
      star_date: selectedDates[0]
        ? moment(selectedDates[0]).format("YYYY-MM-DD")
        : "",
      end_date: selectedDates[1]
        ? moment(selectedDates[1]).format("YYYY-MM-DD")
        : "",
    },
  ]);

  const getData = (
    data: (Tindaklanjut & {
      siswa: Siswa;
    })[]
  ) => {
    const dataNew = data as (Tindaklanjut & {
      siswa: Siswa;
    })[];
    return dataNew;
  };

  const columns = useMemo(
    () => [
      {
        Header: "Nama Siswa",
        accessor: "siswa.nama",
      },
      {
        Header: "Kelas",
        accessor: "siswa.kelas",
      },
      {
        Header: "Hari, Tanggal",
        accessor: (d: Tindaklanjut) => {
          return <p>{moment(d.tanggal).format("dddd, DD/MM/YYYY")}</p>;
        },
      },
      {
        Header: "Bidang",
        accessor: "type",
      },
      {
        Header: "Permasalahan",
        accessor: (d: Tindaklanjut) => {
          return <p className="whitespace-pre-wrap w-[150px]">{d.deskripsi}</p>;
        },
      },
      {
        Header: "Penanganan",
        accessor: (d: Tindaklanjut) => {
          return (
            <p className="whitespace-pre-wrap w-[150px]">{d.penanganan}</p>
          );
        },
      },
      {
        Header: "Tindak Lanjut",
        accessor: (d: Tindaklanjut) => {
          return <p className="whitespace-pre-wrap w-[150px]">{d.tindakan}</p>;
        },
      },
    ],
    [dataLaporan?.result]
  );

  const data = useMemo(
    () => getData(dataLaporan?.result ? dataLaporan.result : []),
    [dataLaporan]
  );
  return (
    <AdminLayout
      title="Laporan Bimbingan"
      breadcrumb={
        <Breadcrumb>
          <BreadcrumbItem>
            <BreadcrumbLink href="#">Laporan</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbItem>
            <BreadcrumbLink href="#">Laporan</BreadcrumbLink>
          </BreadcrumbItem>
        </Breadcrumb>
      }
    >
      <>
        <Head>
          <title>SMABAT || Laporan Bimbingan</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="p-5">
          <div className="flex flex-col gap-3">
            <div className="relative hidden md:block pl-36 mb-3">
              <RangeDatepicker
                propsConfigs={{
                  inputProps: {
                    borderColor: "orange.300",
                    borderWidth: "2px",
                    bg: "white",
                  },
                  dateNavBtnProps: {
                    colorScheme: "orange",
                    variant: "outline",
                  },
                  dayOfMonthBtnProps: {
                    defaultBtnProps: {
                      // borderColor: "red.300",
                      _hover: {
                        background: "orange.400",
                        color: "white",
                      },
                    },
                    isInRangeBtnProps: {
                      color: "white",
                      bg: "orange.300",
                    },
                    selectedBtnProps: {
                      background: "orange.400",
                      color: "white",
                    },
                  },
                }}
                selectedDates={selectedDates}
                onDateChange={setSelectedDates}
              />
              <div className="absolute top-1 right-1">
                <IconButton
                  variant="ghost"
                  size={"sm"}
                  colorScheme={
                    selectedDates.length != 0 ? "orange" : "blackAlpha"
                  }
                  aria-label="update"
                  fontSize="20px"
                  onClick={async () => {
                    setSelectedDates([]);
                  }}
                  icon={<MdClear />}
                />
              </div>
              <div className="absolute gap-3 flex flex-row items-center top-[4px] left-0">
                <p className="font-bold">Filter tanggal</p>
                <CalendarIcon fontSize={"20px"} color={"orange.300"} />
              </div>
            </div>
            <div className="mb-3 flex flex-row items-center gap-3">
              <p className="font-bold min-w-max">Status</p>
              <div className="w-full">
                <Select
                  onChange={(e) => setSelectedType(e.target.value)}
                  bg={"white"}
                  borderColor={"orange.300"}
                  borderWidth={2}
                  placeholder="Pilih..."
                >
                  <option value={"Pribadi"}>Pribadi</option>
                  <option value={"Sosial"}>Sosial</option>
                </Select>
              </div>
            </div>
          </div>
          <div className="mt-3">
            <Tooltip label="Print" fontSize="sm">
              <Button
                onClick={() => {
                  onOpenPrint();
                }}
                disabled={dataLaporan?.result.length == 0}
                leftIcon={<IoDownload />}
                fontWeight={600}
                color={"white"}
                bg={"blue.400"}
                size={"sm"}
                _hover={{
                  bg: "blue.300",
                }}
              >
                Print
              </Button>
            </Tooltip>
          </div>
          <div className="text-[14px]">
            <DataTable
              isSearch={false}
              sizeSet
              hiddenColumns={[]}
              isLoading={isLoading}
              columns={columns}
              data={data}
            />
          </div>
        </div>
        <Modal
          isCentered
          isOpen={isOpenPrint}
          onClose={() => {
            onClosePrint();
          }}
        >
          <ModalOverlay bg="blackAlpha.300" backdropFilter="blur(5px)" />
          <ModalContent className="!max-w-[1200px] relative !max-h-[80vh] overflow-auto">
            <ModalHeader>Print data</ModalHeader>
            <ModalCloseButton />
            <ModalBody className="max-w-[1200px] !max-h-[80vh] overflow-auto !pb-5">
              <div className="w-full border-[1px]">
                <LaporanBimbinganPDF
                  filter={{
                    type: selectedType,
                    start_date: selectedDates[0]
                      ? moment(selectedDates[0]).format("DD/MM/YYYY")
                      : "",
                    end_date: selectedDates[1]
                      ? moment(selectedDates[1]).format("DD/MM/YYYY")
                      : "",
                  }}
                  data={dataLaporan?.result}
                  ref={componentRef}
                />
              </div>
            </ModalBody>
            <Button
              onClick={handlePrint}
              colorScheme={"orange"}
              position={"absolute"}
              bottom={"10"}
              right={"10"}
              leftIcon={<DownloadIcon />}
            >
              Print
            </Button>
          </ModalContent>
        </Modal>
      </>
    </AdminLayout>
  );
};

export default LaporanBimbingan;

import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useCallback, useEffect, useState } from "react";
import { useRouter } from "next/router";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";

import { CreateUserInput, createUserSchema } from "../../server/schema/user.schema";
import { trpc } from "../../utils/trpc";
import { Button, FormControl, FormErrorMessage, FormLabel, Input, InputGroup, InputRightElement, Select } from "@chakra-ui/react";

const SignUp: NextPage = () => {
  const router = useRouter();
  const [show, setShow] = useState(false)
  const handleClick = () => setShow(!show)
  const { register, handleSubmit, watch, formState: { errors, isSubmitting, isDirty, isValid } } = useForm<CreateUserInput>({
    resolver: zodResolver(createUserSchema),
    mode: "onChange"
  });

  const { mutateAsync } = trpc.useMutation(["user.create"]);

  const onSubmit = useCallback(
    async (data: CreateUserInput) => {
      const result = await mutateAsync(data);
      if (result.status === 201) {
        // router.push("/")
        console.log(result)
      }
    },
    [mutateAsync, router]
  );

  useEffect(() => {
    const subs = watch((e) => {
      // console.log(e)
    })

    return () => subs.unsubscribe()
  }, [watch])

  return (
    <>
      <Head>
        <title>Next App - Create</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <form onSubmit={handleSubmit(onSubmit)}>
        <FormControl isInvalid={errors.name != undefined}>
          <FormLabel htmlFor='name'>First name</FormLabel>
          <Input
            id='name'
            placeholder='name'
            {...register('name')}
          />
          <FormErrorMessage>
            {errors.name && errors.name.message}
          </FormErrorMessage>
        </FormControl>
        <FormControl isInvalid={errors.email != undefined}>
          <FormLabel htmlFor='email'>Email</FormLabel>
          <Input
            id='email'
            placeholder='email'
            {...register('email', {
              required: 'This is required',
            })}
          />
          <FormErrorMessage>
            {errors.email && errors.email.message}
          </FormErrorMessage>
        </FormControl>
        <FormControl isInvalid={errors.nomorInduk != undefined}>
          <FormLabel htmlFor='nomorInduk'>Nomor Induk</FormLabel>
          <Input
            id='nomorInduk'
            placeholder='nomorInduk'
            {...register('nomorInduk')}
          />
          <FormErrorMessage>
            {errors.nomorInduk && errors.nomorInduk.message}
          </FormErrorMessage>
        </FormControl>
        <FormControl isInvalid={errors.password != undefined}>
          <FormLabel htmlFor='password'>Password</FormLabel>
          <InputGroup size='md'>
            <Input
              type={show ? 'text' : 'password'}
              id='password'
              placeholder='password'
              {...register('password')}
            />
            <InputRightElement width='4.5rem'>
              <Button h='1.75rem' size='sm' onClick={handleClick}>
                {show ? 'Hide' : 'Show'}
              </Button>
            </InputRightElement>
          </InputGroup>
          <FormErrorMessage>
            {errors.password && errors.password.message}
          </FormErrorMessage>
        </FormControl>
        <FormControl isInvalid={errors.role != undefined}>
          <FormLabel htmlFor='role'>Role</FormLabel>
          {/* <Input
            id='role'
            placeholder='role'
            {...register('role')}
          /> */}
          <Select id='role' placeholder='Pilih role' {...register('role')}>
            <option value='admin'>Admin</option>
            <option value='bk'>Guru BK</option>
            <option value='guru'>Guru</option>
            <option value='siswa'>Siswa</option>
            <option value='perpus'>Perpus</option>
            <option value='wali'>Wali</option>
          </Select>
          <FormErrorMessage>
            {errors.role && "Role harus di"}
          </FormErrorMessage>
        </FormControl>
        <Button disabled={!isValid} mt={4} colorScheme='teal' isLoading={isSubmitting} type='submit'>
          Submit
        </Button>
      </form>
    </>
  );
};

export default SignUp;
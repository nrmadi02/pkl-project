// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

model User {
    id         String @id @default(uuid())
    name       String @db.VarChar(255)
    email      String @unique
    nomorInduk String @unique

    password String
    role     RoleEnumType? @default(siswa)

    guru Guru?
    siswa Siswa?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map(name: "users")
}

model Guru {
    id String @id @default(uuid())
    nama String @db.VarChar(255)
    nip String @unique @db.VarChar(255)
    email String @unique @db.VarChar(255)
    jenisKelamin String @db.VarChar(255)
    jenisGuru String @db.VarChar(255)
    fotoProfile String? @db.Text()
    waliKelas Boolean @default(false)
    namaKelas String? @db.VarChar(255)

    user   User @relation(fields: [userID], references: [id])
    userID String  @unique
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map(name: "guru")
}

model Siswa {
    id String @id @default(uuid())
    nama String @db.VarChar(255)
    nis String @unique @db.VarChar(255)
    email String @unique @db.VarChar(255)
    jenisKelamin String @db.VarChar(255)
    fotoProfile String? @db.Text()
    kelas String? @db.VarChar(255)

    user   User @relation(fields: [userID], references: [id])
    userID String  @unique

    pelanggaran Pelanggaran[]
    tindaklanjut Tindaklanjut[]
    panggil_ortu Panggilortu[]
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map(name: "siswa")
}

model Kelas {
    id String @id @default(uuid())
    name String @db.VarChar(255)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map(name: "kelas")
}

model Pelanggaran {
    id String @id @default(uuid())
    type String @db.VarChar(255)
    deskripsi String @db.Text
    point Int @db.Int
    pemberi String @db.VarChar(255)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    siswa   Siswa @relation(fields: [siswaID], references: [id])
    siswaID String

    @@map(name: "pelanggaran")
}

model Tindaklanjut {
    id String @id @default(uuid())
    type String @db.VarChar(255)
    deskripsi String @db.Text
    penindak String @db.VarChar(255)
    penanganan String @db.Text 
    tindakan String @db.Text
    tanggal DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    siswa   Siswa @relation(fields: [siswaID], references: [id])
    siswaID String

    @@map(name: "tindaklanjut")
}

model Panggilortu {
    id String @id @default(uuid())
    no_surat String @db.VarChar(255)
    perihal String @db.VarChar(255)
    nama_ortu String @db.VarChar(255)
    wali_kelas String @db.VarChar(255)
    nip_wali String @db.VarChar(255)
    nama_bk String @db.VarChar(255)
    nip_bk String @db.VarChar(255)
    tanggal DateTime
    waktu DateTime
    tempat String @db.VarChar(255)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    siswa   Siswa @relation(fields: [siswaID], references: [id])
    siswaID String

    @@map(name: "panggil_ortu")
}

model Periode {
    id String @id @default(uuid())
    periode String @unique @db.VarChar(255)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map(name: "periode")
}

enum RoleEnumType {
    siswa
    admin
    perpus
    wali
    bk
    guru
    lab
}
